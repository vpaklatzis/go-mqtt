# =======================================
# MQTT section
# =======================================

## TCP listener settings.
##
# mqtt.listeners.tcp.1 = 127.0.0.1:61613
# mqtt.listeners.tcp.2 = ::1:61613
mqtt.listeners.tcp.1 = 0.0.0.0:1883

## TCP listener options (as per the broker configuration).
##
mqtt.tcp_listen_options.backlog = 4096  
mqtt.tcp_listen_options.recbuf  = 131072
mqtt.tcp_listen_options.sndbuf  = 131072
#
mqtt.tcp_listen_options.keepalive = true
mqtt.tcp_listen_options.nodelay   = true
#
mqtt.tcp_listen_options.exit_on_close = true
mqtt.tcp_listen_options.send_timeout  = 120000

## TLS listener settings
## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.
#
# mqtt.listeners.ssl.default = 8883
#
# ssl_options.cacertfile = /path/to/tls/ca_certificate_bundle.pem
# ssl_options.certfile   = /path/to/tls/server_certificate.pem
# ssl_options.keyfile    = /path/to/tls/server_key.pem
# ssl_options.verify     = verify_peer
# ssl_options.fail_if_no_peer_cert  = true
#


## Number of Erlang processes that will accept connections for the TCP
## and TLS listeners.
##
mqtt.num_acceptors.tcp = 10
mqtt.num_acceptors.ssl = 10

## Whether or not to enable proxy protocol support.
## Once enabled, clients cannot directly connect to the broker
## anymore. They must connect through a load balancer that sends the
## proxy protocol header to the broker at connection time.
## This setting applies only to STOMP clients, other protocols
## like STOMP or AMQP have their own setting to enable proxy protocol.
## See the plugins or broker documentation for more information.
##
# mqtt.proxy_protocol = false

## Set the default user name and password used for anonymous connections (when client
## provides no credentials). Anonymous connections are highly discouraged!
##
mqtt.default_user = admin
mqtt.default_pass = instar

## Enable anonymous connections. If this is set to false, clients MUST provide
## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass
## keys. Anonymous connections are highly discouraged!
##
mqtt.allow_anonymous = false

## If you have multiple vhosts, specify the one to which the
## adapter connects.
##
# mqtt.vhost = /

## Specify the exchange to which messages from MQTT clients are published.
##
# mqtt.exchange = amq.topic

## Specify TTL (time to live) to control the lifetime of non-clean sessions.
##
mqtt.subscription_ttl = 1800000

## Set the prefetch count (governing the maximum number of unacknowledged
## messages that will be delivered).
##
mqtt.prefetch = 10
##
## Sets the durable queue type to be used for QoS 1 subscriptions.
##
## Supported types are:
## 
## * classic
## * quorum
##
## IMPORTANT: changing this setting requires all existing queues used by
## the MQTT plugin to be DELETED or clients will fail to subscribe.
## So this setting should be used for new clusters.
##
mqtt.durable_queue_type = classic
#
# =======================================
# MQTT over WS section
# =======================================
web_mqtt.tcp.port = 9001
# web_mqtt.ssl.port       = 15676
# web_mqtt.ssl.backlog    = 1024
# web_mqtt.ssl.cacertfile = /path/to/ca_certificate.pem
# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
# web_mqtt.ssl.keyfile    = /path/to/server_key.pem
# needed when private key has a passphrase
# web_mqtt.ssl.password   = changeme
# web_mqtt.ssl.port       = 15676
# web_mqtt.ssl.backlog    = 1024
# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem
# web_mqtt.ssl.keyfile    = /path/to/server_key.pem
# web_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem
# web_mqtt.ssl.password   = changeme

# web_mqtt.ssl.honor_cipher_order   = true
# web_mqtt.ssl.honor_ecc_order      = true
# web_mqtt.ssl.client_renegotiation = false
# web_mqtt.ssl.secure_renegotiate   = true

# web_mqtt.ssl.versions.1 = tlsv1.2
# web_mqtt.ssl.versions.2 = tlsv1.1
# web_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384
# web_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384
# web_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384
# web_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384
# web_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384
# web_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384
# web_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384
# web_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384
# web_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384
# web_mqtt.proxy_protocol = true
#
##  Cowboy HTTP
# connection inactivity timeout
web_mqtt.cowboy_opts.idle_timeout = 60000
# max number of pending requests allowed on a connection
web_mqtt.cowboy_opts.max_keepalive = 200
# max number of headers in a request
web_mqtt.cowboy_opts.max_headers   = 100
# max number of empty lines before request body
web_mqtt.cowboy_opts.max_empty_lines = 5
# max request line length allowed in requests
web_mqtt.cowboy_opts.max_request_line_length = 8000

# WebSocket traffic compression is enabled by default
web_mqtt.ws_opts.compress = true
# WebSocket connection inactivity timeout
web_mqtt.ws_opts.idle_timeout = 60000
web_mqtt.ws_opts.max_frame_size = 50000